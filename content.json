{"pages":[{"title":"About","text":"Nice to meet you ^^欢迎留言~","link":"/about/index.html"}],"posts":[{"title":"test_my_site","text":"","link":"/2022/01/27/test-my-site/"},{"title":"线性代数的本质 - 02线性组合、张成的空间与基","text":"所有可以表示为给定向量线性组合的向量集合，被称为给定向量张成的空间 两个向量张成的空间就是它们所有可能的线性组合，也就是缩放再相加之后可能得到的向量 一组向量中至少有一个是多余的，没有对张成空间做出任何贡献，有多个向量，并且可以移除其中一个而不减小张成的空间，当这种情况发生时，它们是线性相关的。其中一个向量可以表示为其他向量的线性组合，因为这个向量已经落在其他向量张成的空间之中 如果所有向量都给张成的空间增添了新维度，它们是线性无关的 基的严格定义：张成该空间的一个线性无关向量的集合","link":"/2021/10/06/02%20%E7%BA%BF%E6%80%A7%E7%BB%84%E5%90%88%E3%80%81%E5%BC%A0%E6%88%90%E7%9A%84%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%9F%BA/"},{"title":"线性代数的本质 - 03矩阵与线性变换","text":"变换是在暗示以特定方式来可视化这一输入-输出关系，一种理解“向量的函数”的方法是使用运动。 线性代数限制在一种特殊类型的变换上，“线性变换”：一是直线在变换之后仍然保持为直线，不能有所弯曲；二是原点必须保持固定。总的来说，保持网格线平行并等距分布。 一个二维线性变换仅由四个数字完全确定，2X2矩阵，可以把列理解为两个特殊的向量，即$\\vec{i}$和$\\vec{j}$分别落脚的位置。如果有一个描述线性变换的2x2矩阵，以及一个给定向量，线性变换对这个向量的作用：只需取出向量的坐标，将它们分别与矩阵的特定列相乘，然后将结果相加即可。我们完全可以把矩阵的列看作变换后的基向量，把矩阵向量乘法看作一个线性组合。 如果变换后的$\\vec{i}$和$\\vec{j}$是线性相关的，意味着一个向量是另一个的倍数，那么这个线性变换将整个二维空间挤压到它们所在的一条直线上，也就是这两个线性相关向量所张成的一维空间。 每次当你看到一个矩阵时，你都可以把它解读为对空间的一种特定变换。","link":"/2021/10/06/03%20%E7%9F%A9%E9%98%B5%E4%B8%8E%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2/"},{"title":"线性代数的本质 - 04矩阵乘法与线性变换复合","text":"一个变换之后再进行另一个变换，这个新的线性变换被称为前两个独立变换的“复合变换”。eg：先旋转再剪切：通常将函数写在变量的左侧，所以函数复合时从右向左读: 矩阵乘法满足结合律，交换律不满足","link":"/2021/10/06/04%20%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E4%B8%8E%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E5%A4%8D%E5%90%88/"},{"title":"线性代数的本质 - 05行列式","text":"只要知道单位正方形面积变化的比例，就能知道其他任意区域的面积变化比例。由网格线保持平行且等距分布推出，无论一个方格如何变化，对其他大小的方格来说，都会有相同变化。 这个缩放比例，即线性变换对面积产生改变的比例，被称为这个变换的行列式。 当空间取向被反转时，行列式为负值，绝对值依然是区域面积的缩放比例： 三维空间中是体积的缩放，用“右手定则”描述三维空间的取向。如果只能用左手描述时，说明空间取向发生翻转，行列式为负。 计算行列式","link":"/2021/10/06/05%20%E8%A1%8C%E5%88%97%E5%BC%8F/"},{"title":"线性代数的本质 - 06逆矩阵、列空间与零空间","text":"求解$A\\vec{x}=\\vec{v}$，意味着寻找一个$\\vec{x}$，使得它在变换后与$\\vec{v}$重合。解在于A的变换是将空间挤压到一条线或一个点的低维空间，还是完整的二维空间。即A的行列式为0，或不为0。 不为0时：有且只有一个向量与$\\vec{v}$重合，可以通过逆向进行变换并跟踪$\\vec{v}$的动向来找到这个向量。A的逆，即$A^{-1}$。什么都不做的变换，称为“恒等变换”。求解$\\vec{x}$： $det(A)\\neq 0$ -&gt; $A^{-1}$ 为0时：变换将空间压缩到更低的维度上，此时没有逆变换，$det(A)=0$，解仍然可能存在： 当变换结果为一条直线时，结果是一维的，这个变换的秩为1；当变换后的向量落在一个二维平面上，这个变换的秩为2。秩代表着变换后空间的维数。 不管是一条直线、一个平面还是三维空间等，所有可能的变换结果的集合，被称为矩阵的“列空间”。 矩阵的列为基向量变换后的位置，这些变换后的基向量张成的空间就是所有可能的变换结果。列空间就是矩阵的列所张成的空间，秩更精确的定义是列空间的维数。 零向量一定被包含在列空间中，因为线性变换必须保持原点位置不变。对一个满秩变换来说唯一能在变换后落在原点的就是零向量自身，但对一个非满秩矩阵来说，它将空间压缩至一个更低维度上，会有一系列向量在变换后成为零向量。 在变换后落在原点的向量集合，被称为矩阵的“零空间”或“核”，变换后一些向量落在零向量上，“零空间”就是这些向量所构成的空间。 对线性方程组来说，当向量$\\vec{v}$恰好为零向量时，零空间给出的就是这个向量方程的所有可能解。 补充说明 - 非方阵 3x2矩阵的几何意义是将二维空间映射到三维空间上 因为矩阵由两列表明输入空间有两个基向量，有三行表明每一个基向量在变换后都用三个独立的坐标来表示 2x3矩阵的几何意义是将三维空间映射到二维空间上 二维空间到一维空间的变换","link":"/2021/10/06/06%20%E9%80%86%E7%9F%A9%E9%98%B5%E3%80%81%E5%88%97%E7%A9%BA%E9%97%B4%E4%B8%8E%E9%9B%B6%E7%A9%BA%E9%97%B4/"},{"title":"线性代数的本质 - 07点积与对偶性","text":"点积的标准观点：两个相同维数的向量，或两个相同长度的数组，求他们的点积，就是将相应坐标配对，求出每一对的乘积，然后将结果相加 点积与顺序无关 对偶性 多维空间到一维空间（数轴）的线性变换 单位向量的点积可以看成将向量投影到单位向量所在直线上所得到的投影值 非单位向量：投影后缩放 总言之即，向量与给定非单位向量的点积可以解读为，首先将朝给定向量上投影，然后将投影的值与给定向量长度相乘 二维空间到数轴的线性变换通过将空间投影到给定数轴上来定义，因为变换是线性的，则必然可以用某个1x2矩阵描述，又因为1x2矩阵与二维向量相乘的计算过程和转置矩阵并求点积的计算过程相同，所以这个投影变换必然会与某个二维向量相关。 无论何时看到一个二维到一维的线性变换，他的输出空间是一维数轴，空间中会存在唯一的向量v与之相关，就这意义而言，应用变换和与向量v做点积是一样的 两个向量点乘，就是将其中一个向量转化为线性变换","link":"/2021/10/06/07%20%E7%82%B9%E7%A7%AF%E4%B8%8E%E5%AF%B9%E5%81%B6%E6%80%A7/"},{"title":"线性代数的本质 - 08叉积的标准介绍、以线性变换的眼光看叉积","text":"叉积的标准介绍 顺序对叉积有影响，$\\vec{v}$在$\\vec{w}$的右边，那么叉乘为正 $\\vec{v}$在$\\vec{w}$的左边，那么叉乘为负 05行列式计算叉积： 以线性变换的眼光看叉积 真正的叉积是通过两个三维向量生成一个新的三维向量，这个叉积的结果是一个向量，长度是平行四边形的面积，方向与平行四边形所在的面垂直，使用右手定则确定方向。 why？-对偶性07 点积与对偶性找到的线性函数对于给定向量的作用：将向量投影到垂直于v和w的直线上，然后将投影长度与v和w张成的平行四边形的面积相乘。这意味着我们找到了一个向量p，使得p与某个向量（x，y，z）点乘时，所得结果等于一个3x3矩阵的行列式，这个矩阵的三列分别为（x，y，z）、v的坐标和w的坐标，定义了一个线性变换：应用这个变换与对偶向量点乘等价","link":"/2021/10/06/08%20%E5%8F%89%E7%A7%AF%E7%9A%84%E6%A0%87%E5%87%86%E4%BB%8B%E7%BB%8D%E3%80%81%E4%BB%A5%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%9A%84%E7%9C%BC%E5%85%89%E7%9C%8B%E5%8F%89%E7%A7%AF/"},{"title":"线性代数的本质 - 09基变换","text":"发生在向量与一组数之间的任意一种转化，都被称为一个坐标系 03 矩阵与线性变换将矩阵乘法理解为应用一个特定的线性变换 变换后的向量仍旧是相同的线性组合，不过使用的是新的基向量 坐标系之间的转换：","link":"/2021/10/06/09%20%E5%9F%BA%E5%8F%98%E6%8D%A2/"},{"title":"线性代数的本质 - 10特征向量与特征值","text":"考虑一个线性变换意味着矩阵对它的作用仅仅是拉伸或者压缩而已，如同一个标量，这些特殊向量被称为变换的“特征向量”，每个特征向量都有一个所属的值，被称为“特征值” 三维旋转中特征值为1时，相当于找到了一个旋转轴 计算特征值和特征向量：寻找一个向量V，使得这个新矩阵与V相乘结果为零向量06 逆矩阵、列空间与零空间空间压缩对应的就是矩阵的行列式为0 二维线性变换不一定有特征向量 可能出现只有一个特征值，但特征向量不止在一条直线上 特征基：09 基变换如果基向量恰好是特征向量 变换坐标系使得这些特征向量为基向量 当需要计算次幂的时候，将坐标系换成特征基会方便很多，然后转换回标准坐标系","link":"/2021/10/06/10%20%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F%E4%B8%8E%E7%89%B9%E5%BE%81%E5%80%BC/"},{"title":"线性代数的本质 - 11抽象向量空间","text":"行列式和特征向量与所选坐标系无关，行列式告诉的是一个变换对面积的缩放比例，特征向量则是在变换中留在它所张成的空间中的向量，这二者都是暗含于空间中的性质，自由选取坐标系不会改变它们最根本的值 既不是一个箭头也不是一组数字，但是同样具有向量特性的东西：函数函数的线性变换有一个完全合理的解释：这个变换接收一个函数并把它变成另一个函数，从微积分中可以找到一个常见的例子——导数。“算子”和“变换”的意思是一样的一个函数变换是线性的：03 矩阵与线性变换抽象性带来一般性的结论，不仅适用于箭头也适用于函数，满足以下两条性质的变换是线性的：“可加性”和“成比例”eg：求导是线性运算 多项式空间上，整个空间包含任意高次的多项式，首先我们要给这个空间赋予坐标的含义，需要选取一个基由于多项式的次数可以任意高，所以这个基函数集也是无穷大的这些类似向量的事物，比如箭头、一组数、函数等，它们构成的集合被称为“向量空间”只要定义满足公理，就能顺利的应用结论","link":"/2021/10/06/11%20%E6%8A%BD%E8%B1%A1%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4/"},{"title":"线性代数的本质 - 12克莱姆法则、几何解释","text":"05 行列式、07 点积与对偶性、06 逆矩阵、列空间与零空间高斯消元比克莱姆计算得更快 $det（A）= 0$降维，要么存在无数解要么没有解 $det（A）\\neq 0$维数依然相同，一个输入对应一个输出，一个输出也对应一个输入 对大多数线性变换来说，点积会随着变换而改变，不改变点积的矩阵变换是正交的变换，基向量在变换后依然保持单位长度且相互垂直 用正交矩阵求解线性系统非常简单，因为点积保持不变，所以已知的输出向量和矩阵的列向量的点积，分别等同于未知输入向量和各个基向量的点积\\ 对大多数线性方程组：这个解法就是克莱姆法则","link":"/2021/10/06/12%20%E5%85%8B%E8%8E%B1%E5%A7%86%E6%B3%95%E5%88%99%E3%80%81%E5%87%A0%E4%BD%95%E8%A7%A3%E9%87%8A/"},{"title":"机器学习 - 01概述","text":"工作流程机器学习是从数据中自动分析获得模型，并利用模型对未知数据进行预测。 获取数据 数据基本处理 特征工程 机器学习（模型训练） 模型评估 结果达到要求，上线服务 没有达到要求，重新上面步骤算法分类 监督学习 无监督学习 半监督学习 强化学习 监督学习：输入数据由特征值和目标值组成，输出可以是连续的值（回归），或者是有限个离散值（分类）。 无监督学习：输入数据由特征值组成，没有目标值。输入数据没有被标记，也没有确定的结果。样本数据类别未知； 需要根据样本间的相似性对样本集进行类别划分。 半监督学习：训练集同时包含标记样本数据和未标记样本数据 强化学习：实质是make decisions 问题，即自动进行决策，并且可以做连续决策。主要包含五个元素：agent, action, reward, environment, observation；强化学习的目标就是获得最多的累计奖励。模型评估 分类模型评估 准确率 精确率 召回率 F1-score AUC指标 回归模型评估 均方根误差（Root Mean Squared Error，RMSE） 相对平方根误差（Relative Squared Error，RSE） 平均决定误差（Mean Absolute Error，MAE) 相对绝对误差（Relative Absolute Error，RAE) 拟合 欠拟合（under-fitting）：模型学习的太过粗糙，连训练集中的样本数据特征关系都没有学出来。 过拟合（over-fitting）：所建的机器学习模型或者是深度学习模型在训练样本中表现得过于优越，导致在测试数据集中表现不佳。","link":"/2020/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%20-%2001%E6%A6%82%E8%BF%B0/"},{"title":"论文阅读 - 01 DeepFix Fixing Common C Language Errors by Deep Learning","text":"program repair ≈ grammar correction in nlp 作者提出了一个端到端的，带 attention 的多层 seq2seq neural network，包括 RNN 编码器，和带 attention 的 RNN 解码器。该网络可以预测程序出错的位置并附上正确的修复。对比其他修复特定编程任务的工作，DeepFix 可以用在任何未预见的任务上。不易解决的错误需要考虑到程序文本中的长期依赖。DeepFix 通过带注意力机制的 seq2seq 模型来捕捉长期依赖。它的优势在于：(1) 利用端对端的基于深度学习网络解决普遍的编程问题；(2) 可以迭代地解决一个程序中的多个错误；(3) 在上千 C 程序评估中得到很好的结果。 Program Representation程序文本由不同类型的标记组成，如类型、关键字、特殊字符(如分号)、函数、文字和变量。其中，类型、关键字、特殊字符和库函数构成了跨不同程序的共享词汇表。作者在表示程序时保留它们，对其他类型的 token 进行如下建模。首先定义一个固定大小的名称池，然后为每个程序构造一个单独的编码映射 encoding map ，方法是将程序中每个不同的标识符(变量名或函数名)随机映射到池中唯一的名称，并选择一个足够大的池来为数据集中的任何程序创建上述映射。这种转换不会改变程序的语义，且是可逆的。字面量的确切值对学习任务无关紧要，因此，根据字面值的类型将其映射为特殊的 token ，例如，将所有整数字面值映射为 NUM ，将所有字符串字面值映射为 STR 。用 表示标记序列的结束。 由于一个程序用 seq 的 tokens 表示时，要产生类似长度的准确修复后的 seq 非常困难，且一个程序通常包含上百个 token。所以作者把代码行号也进行标记，将一个 K 行的程序 P 表示为 $(l_1,s_1),…(l_k,s_k)$，l 和 s 分别是对行号和语句的标记。一个 fix 包括 $l_i,s_i$ ，这比用全部的 token 作为输出简单得多。 Neural Network Architecture基于 Neural Machine Translation by Jointly Learning to Align and Translate ，NLP 中 encoder-decoder 中第一个使用 attention 机制的工作，将 attention 机制用到了神经网络机器翻译(NMT)。https://arxiv.org/pdf/1409.0473.pdf 这里编码器和解码器 rnn 都由 N 个堆叠的门控循环单元(GRUs)组成。编码器将输入序列中的每个 token 映射到一个称为 annotation 的实向量。对于输入序列$x_1，…，x_{T_x}$, t 时刻的隐藏单元激活计算如下: $h_t^{(1)} = GRU(h_{t-1}^{(1)},x_t)$ $h_t^{(n)} = GRU(h_{t-1}^{(n)},h_t^{(n-1)}),\\forall n \\in { 2,…,N }$ 解码器网络的隐藏状态被初始化为用编码器网络的最终状态，然后更新： $d_t^{(n)} = GRU(d_{t-1}^{(n)},d_t^{(n-1)}),\\forall n \\in { 2,…,N }$ $d_t^{(1)} = GRU(d_{t-1}^{(1)},z_t)$ 其中 $z_t$ 是输出 $\\hat{y}_{t-1}$在 $t-1$ 和上下文向量 $c_t$ 的连接，定义如下: $c_t = \\sum_{j=1}^{T_x} a_{tj}h_j^{(N)}$ $a_{tj} = \\frac{exp(e_{tj})}{\\sum_{k=1}^{T_x}exp(e_{tk})}$ $e_{tk} = \\Phi(d_{t-1},h_k^{(N)})$ c 就是全部隐状态的一个加权和，用到归一化权重 a 。a 就是一个对齐模型，用来评估当前预测词，与输入词每一个词的相关度。将上一个输出序列隐状态 $d_{t-1}$ 和输入序列隐状态 $h$ 输入网络，然后做 softmax 归一化，计算出权重。 Iterative Repair DeepFix 使用简单而有效的迭代策略来修复程序中的多个错误。oracle 的工作是通过检查更新后的程序是否比输入的程序好来决定是否接受修复。如果更新后的程序不会比输入程序产生更多的错误消息，则使用编译器并接受修复。我们还使用一些启发式方法来防止对输入程序的任意更改。例如，如果 oracle 不保留原始语句 $s_i$ 中的标识符和关键字，则它拒绝 fix $s_i$。一旦修复程序被接受，DeepFix 将再次向网络显示更新后的程序。 这种迭代策略停止的条件：(1) oracle 确定更新程序没有任何错误；或 (2) 网络视输入程序是正确的，发出一种特殊 token “fix”；或 (3) oracle拒绝修复,或 (4)达到预定的迭代的数量上限。 除了决定是否替换语句，网络还会决定新的一行是否要插入在行前或行后，用 $l_i^-,l_i^+$ 代替 $l_i$，如果要删除行，则将 $l_i$ 带上空字符 $\\epsilon$。oracle 使用程序特殊的编码映射，将修复好的 token sequence 重构回原来的标识符。它使用修复中的行号，并用输入程序中相应行中的字面值替换诸如 NUM 和 STR 等特殊标记。如果 oracle 不能重建程序文本，那么它拒绝修复。 作者提出的修复策略有几个优点：(1) 程序完整地呈现在网络上。识别和修复编程错误通常需要能够推断长期依赖关系的全局分析。网络架构能够有选择地参与程序的任何部分，可以推理结构和语法约束，以预测错误的位置和需要的修复。(2) 在输入和输出中都包含行号，降低了粒度，从而降低了预测任务的复杂性。(3) DeepFix可以迭代地修复程序中的多个错误。(4) oracle用于跟踪进度，防止无用的或任意的更改。(5) DeepFix的修复策略比较泛化。例如，如果我们试图修复逻辑错误，我们可以使用测试引擎和测试套件作为oracle。如果修复程序通过了更多的测试，那么它将被接受。 Experimentshttp://iisc-seal.net/deepfix","link":"/2022/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%20-%2001/"},{"title":"论文阅读 - 02Deep Reinforcement Learning for Programming Language Correction","text":"新手编程者经常饱受程序语言正规语法的折磨，为了协助他们，作者设计了一个基于强化学习的新型程序语言纠正框架，这个框架允许一个智能体 agent 模仿人类行为进行文本导航和编辑，展示了一个 agent 可以通过直接从原始的输入自我探索来进行训练，自我探索就是说，程序文本它自己，不利用程序语言的正规语法的任何经验。我们充分利用专家案例作为 1/10 的训练数据，来加速训练。 程序语言规定程序文本的语法规则检验。一个不遵守规则的程序文本不会被编译执行，这给新手编程者带来了障碍。在目前大量的线上编程课程中，从指导者获得个性化反馈是十分不可实行的。因此，作者的工作旨在利用技术帮助新手编程者，通过自动化修正程序中的通用语法错误。 作者通过强化学习提出这个问题。当面对一个错误，一个程序员根据程序文本找到错误的位置，然后修正编辑来修复错误。作者提出了一个新型程序语言修正框架，在这里，一个 agent 可以模仿这些行为。一个 agent 可以访问和修改一个程序文本，对它来说，检查程序文本的语法有效性的编译器是一个黑盒子。编译器通常不会精确地指明错误的位置。所以，不能依赖编译器来找到错误的位置和进行修正。作者利用编译器生成的错误信息的数量设计了一个 reward function。agent 的目标是将程序成功编译所必要的编辑行为表现的最好。 框架的挑战是为程序文本的 agent 学习一个 control policy，不通过任何带有程序语言正规语法知识的agent。通过深度学习，agents 可以被训练到专家水平来玩视觉文字游戏，有趣的是，这些技术直接从原始输入，如像素、文本等。在这项工作中，第一次展示了它在程序空间中的可能性。 如图1，修复了税收算法，有两个语法错误：第四行的 scanf 使用错误， 第12行的 “}” 缺失。程序以被标记化的形式展现给 agent，agent 的指针位置被初始化为程序的第一个 token。在程序中 agent 的导向性的动作用箭头表示，系列动作如图所示。agent 准确定位和修复所有错误。首先，agent 导向错误的位置行4，用逗号替代不正确的分号，在错误2中插入丢失的 “}” 。这些编辑操作完成后，程序成功编译，agent 停止。这比蛮力列举编译修正高效很多。 通过长短期记忆网络 LSTM 网络进行编码，agent 被允许执行一系列的导航和编辑行为来修复程序。每一步修复错误的编辑都获得一些小的奖励，最大化达到目标状态的奖励，即程序的无错误状态。agent 的control policy 就是学习使用 A3C 算法。 训练一个agent的难点有两个：（1）agent 要同时定位错误并在此做出精确的编辑来修复程序。错误的编辑会导致引入更多的错误，使得任务更加困难。为了克服这个问题，我们设定环境来拒绝这样的编辑。这显著的削减了 state space。（2）随着时间增长任务的 state space 越来越大，state 探索收集的信息越来越多，的强化学习趋向越来越慢。一个方法是利用专家表示来引导 agent。在我们的工作中，这些表示是自动生成的而不是人类干预，我们将此称为 RLAssist。 DeepFix 是目前修复程序错误中表现最好的工具。作者在 C 程序上对比该工具和 RLAssist。","link":"/2022/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%20-%2002/"}],"tags":[{"name":"杂","slug":"杂","link":"/tags/%E6%9D%82/"},{"name":"线性代数的本质","slug":"线性代数的本质","link":"/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/"},{"name":"机器学习","slug":"机器学习","link":"/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"intelligence code","slug":"intelligence-code","link":"/tags/intelligence-code/"}],"categories":[{"name":"杂","slug":"杂","link":"/categories/%E6%9D%82/"},{"name":"数学","slug":"数学","link":"/categories/%E6%95%B0%E5%AD%A6/"},{"name":"机器学习","slug":"机器学习","link":"/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"论文阅读","slug":"论文阅读","link":"/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"}]}